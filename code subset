const code = `import java.io.*;
import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int T = sc.nextInt();
    while (T-- > 0) {
      int N = sc.nextInt();
      int[] arr = new int[N];
      for (int i = 0; i < N; i++) {
        arr[i] = sc.nextInt();
      }
      Arrays.sort(arr);
      List<List<Integer>> subsets = new ArrayList<>();
      generateSubsets(arr, 0, new ArrayList<>(), subsets);
      subsets.sort((a, b) -> {
        int len = Math.min(a.size(), b.size());
        for (int i = 0; i < len; i++) {
          if (!a.get(i).equals(b.get(i))) {
            return a.get(i) - b.get(i);
          }
        }
        return a.size() - b.size();
      });
      for (List<Integer> subset : subsets) {
        if (subset.size() > 0) {
          for (int num : subset) {
            System.out.print(num + " ");
          }
          System.out.println();
        }
      }
      System.out.println();
    }
    sc.close();
  }

  static void generateSubsets(int[] arr, int index, List<Integer> current, List<List<Integer>> subsets) {
    if (index == arr.length) {
      subsets.add(new ArrayList<>(current));
      return;
    }
    generateSubsets(arr, index + 1, current, subsets);
    current.add(arr[index]);
    generateSubsets(arr, index + 1, current, subsets);
    current.remove(current.size() - 1);
  }
}


`;

// Find the <div class="monaco-editor"> inside ngx-monaco-editor
const container = document.querySelector('#editor .monaco-editor');

if (!container) {
    console.error("❌ Monaco editor container not found.");
} else {
    // Grab the internal Monaco editor instance
    const editorInstance = monaco.editor.getEditors().find(
        e => e.getDomNode() === container
    );

    if (editorInstance) {
        editorInstance.setValue(code);
        console.log("✅ Code successfully injected into ngx-monaco-editor.");
    } else {
        console.error("❌ Monaco editor instance not found. Make sure the editor is initialized.");
    }
}
